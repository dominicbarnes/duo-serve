#!/usr/bin/env node

// dependencies
var chalk = require('chalk');
var exists = require('fs').existsSync;
var path = require('path');
var Command = require('commander').Command;
var server = require('../lib/server.js');

// cli parsing
var program = new Command('duo-serve')
  .usage('[options] entries')
  .option('-b, --body <path>', 'HTML content for the page (in a file)')
  .option('-c, --copy', 'Turns on copy (instead of symlink)')
  .option('-C, --no-cache', 'Disables the cache during build', true)
  .option('-g, --global <name>', 'Export as a global with the given name')
  .option('-h, --html <path>', 'Path to custom handlebars template for page')
  .option('-o, --output <path>', 'Create a static build in the given path')
  .option('-p, --port <number>', 'Set the server port number', 3000)
  .option('-r, --root <path>', 'Set the duo root dir', process.cwd())
  .option('-t, --title <title>', 'Set the page title', 'duo-serve')
  .option('-T, --token <token>', 'Set the GitHub API token (default uses ~/.netrc)', false)
  .option('-u, --use <plugins>', 'Use npm modules or local files as plugins')
  .parse(process.argv);

// entry files are required
if (!program.args.length) program.help();

// init the server
var srv = server(program.root)
  .title(program.title)
  .cache(program.cache)
  .entry(program.args);

// global
if (program.global) srv.global(program.global);

// custom html page
if (program.html) srv.html(program.html);

// custom html body
if (program.body) srv.body(program.body);

// add plugins
if (program.use) srv.use(plugins(program.use, program.root));

// set token
if (program.token) srv.token(program.token);

// build into a static site
if (program.output) {
  srv.buildTo(program.output, function (err) {
    if (err) {
      console.error();
      console.error(' %s could not build because: %s', chalk.red('✕'), chalk.red(err.stack || err.message));
      console.error();
    } else {
      console.log();
      console.log(' %s built successfully to %s', chalk.green('✓'), chalk.cyan(program.output));
      console.log();
    }
  });
} else {
  // start the server
  srv.listen(program.port, function () {
    console.log();
    console.log(' %s duo-serve running at %s', chalk.green('↑'), chalk.cyan('http://localhost:' + program.port + '/'));
    console.log();
  });
}

/**
 * Retrieve an array of plugins from `--use`.
 *
 * @param {String} plugins
 * @param {String} root
 * @return {Array}
 */
function plugins(use, root) {
  if (!use) return [];

  return use.split(',').map(function (plugin) {
    try {
      var local = path.resolve(root, plugin);
      var npm = path.resolve(root, 'node_modules', plugin);

      var mod = require(exists(local) ? local : npm);
      if (!Array.isArray(mod)) mod = mod();
      return mod;
    } catch (e) {
      console.error(e.stack);
      process.exit(1);
    }
  });
}
