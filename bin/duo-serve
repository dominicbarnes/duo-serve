#!/usr/bin/env node

// dependencies
var exists = require("fs").existsSync;
var path = require("path");
var program = require("commander");
var read = require("fs").readFileSync;
var server = require("../lib/server.js");

// cli parsing
program
  .usage("[options] entries")
  .option("-b, --body <path>", "HTML content for the page (in a file)")
  .option("-p, --port <number>", "Set the server port number", 3000)
  .option("-r, --root <path>", "Set the duo root dir", process.cwd())
  .option("-t, --title <title>", "Set the page title", "duo-serve")
  .option("-u, --use <plugins>", "Use npm modules or local files as plugins")
  .parse(process.argv);

// entry files are required
if (!program.args.length) program.help();

// init the server
var srv = server(program.root)
  .title(program.title)
  .entries(program.args);

// if a body is specified, read the file's contents
if (program.body) {
  var body = read(path.resolve(process.cwd(), program.body), "utf8");
  srv.body(body);
}

// add plugins
plugins(program.use, program.root).forEach(function (fn) {
  srv.use(fn);
});

// start the server
srv.listen(program.port, function () {
  console.log("duo-serve running at http://localhost:%d", program.port);
});

/**
 * Retrieve an array of plugins from `--use`.
 *
 * @param {String} plugins
 * @param {String} root
 * @return {Array}
 */
function plugins(use, root) {
  if (!use) return [];

  return use.split(",").map(function (plugin) {
    try {
      var local = path.resolve(root, plugin);
      var npm = path.resolve(root, "node_modules", plugin);

      return (require(exists(local) ? local : npm))();
    } catch (e) {
      console.error(e.stack);
      process.exit(1);
    }
  });
}
